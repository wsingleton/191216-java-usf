type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 192
    length: 153
    placeholder_text: // Provide your implementation here
    initial_state:
      length: 35
      offset: 199
    initialized_from_dependency: false
    possible_answer: |-
      // Create a reference to hold the provided user value (initialized to null)
              String userValue = null;

              // Instantiate the BufferedReader and prompt the user for input
              consoleReader = new BufferedReader(new InputStreamReader(System.in));
              System.out.print("Provide a string: ");

              // Wrap risky logic in try/catch, attempt to read user input.
              try {
                  userValue = consoleReader.readLine();
              }

              // Handle exceptions
              catch (IOException ioe) {
                  System.err.println("Something went wrong reading from the input stream.");
              } catch (Exception e) {
                  System.err.println("An unexpected exception was thrown.");
              }

              // Always close your closeable resources!
              finally {
                  try {
                      consoleReader.close();
                  } catch (IOException e) {
                      System.err.println("Something went wrong while closing the input stream.");
                  }
              }

              return userValue;
    selected: true
    status: Unchecked
  text: |
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;

    public class Task {

        BufferedReader consoleReader;

        public String getStringFromUser() {

            // Provide your implementation here

        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |
    import org.junit.*;
    import org.junit.rules.ExpectedException;
    import org.junit.rules.Timeout;

    import java.io.ByteArrayInputStream;
    import java.io.InputStream;

    import static org.hamcrest.CoreMatchers.*;
    import static org.junit.Assert.*;

    public class Tests {

      private Task sut;
      private InputStream sysIn = System.in;
      private final ByteArrayInputStream inContent = new ByteArrayInputStream("test".getBytes());

      @Rule
      public ExpectedException expectedException = ExpectedException.none();

      @Rule
      public Timeout globalTimeout = Timeout.seconds(3);

      @Before
      public void setUp() {
        sut = new Task();
        System.setIn(inContent);
      }

      @After
      public void tearDown() {
        sut = null;
        System.setIn(sysIn);
      }

      @Test
      public void testSolution() {
        assertThat("The implementation did not retrieve input from the user correctly.",
                sut.getStringFromUser(), equalTo("test"));
        assertNotNull("The BufferedReader member cannot be null!", sut.consoleReader);
      }

    }
  learner_created: false
status: Unchecked
record: -1
