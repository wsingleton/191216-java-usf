type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 146
    length: 396
    placeholder_text: // Provide your implementation here
    initial_state:
      length: 35
      offset: 75
    initialized_from_dependency: false
    possible_answer: |-
      if (values == null || values.length == 0) {
                  return new String[0];
              }

              String[] stringArr = new String[values.length];

              for (int i = 0; i < values.length; i++) {
                  if (values[i] % 15 == 0) stringArr[i] = "fizzbuzz";
                  else if (values[i] % 5 == 0) stringArr[i] = "buzz";
                  else if (values[i] % 3 == 0) stringArr[i] = "fizz";
                  else stringArr[i] = String.valueOf(values[i]);
              }

              return stringArr;
    selected: true
    status: Solved
  text: |-
    public class Task {

        public String[] fizzBuzz(int[] values) {

            // Provide your implementation here

        }

    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.*;
    import org.junit.rules.ExpectedException;
    import org.junit.rules.Timeout;

    import static org.junit.Assert.assertArrayEquals;

    public class Tests {

      private Task sut;

      @Rule
      public ExpectedException expectedException = ExpectedException.none();

      @Rule
      public Timeout globalTimeout = Timeout.seconds(3);

      @Before
      public void setUp() {
        sut = new Task();
      }

      @After
      public void tearDown() {
        sut = null;
      }

      @Test
      public void testSolutionWithValidArray() {

        int[] testArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
        String[] expectedResult =
              {
                "1", "2", "fizz", "4", "buzz",
                "fizz", "7", "8", "fizz", "buzz",
                "11", "fizz", "13", "14", "fizzbuzz"
              };

        String[] actualResult = sut.fizzBuzz(testArray);
        assertArrayEquals(expectedResult, actualResult);

      }

      @Test
      public void testSolutionWithEmptyArray() {
        assertArrayEquals(new String[0], sut.fizzBuzz(new int[0]));
      }

      @Test
      public void testSolutionWithNullArray() {
        assertArrayEquals(new String[0], sut.fizzBuzz(null));
      }

    }
  learner_created: false
status: Solved
record: -1
