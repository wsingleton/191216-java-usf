create table ERS_USERS
(
    ERS_USERS_ID NUMBER,
    ERS_USERNAME VARCHAR2(50) UNIQUE,
    ERS_PASSWORD VARCHAR2(50),
    USER_FIRST_NAME varchar2(100),
    USER_LAST_NAME varchar2(100),
    USER_EMAIL varchar2(150) UNIQUE,
    USER_ROLE_ID NUMBER,
    CONSTRAINT ERS_USERS_PK PRIMARY KEY (ERS_USERS_ID)
    
    
);

ALTER TABLE ERS_USERS ADD CONSTRAINT USER_ROLES_FK
FOREIGN KEY ( USER_ROLE_ID ) REFERENCES ERS_USER_ROLES ( ERS_USER_ROLE_ID );

create table ERS_REIMBURSEMENT
(
    REIMB_ID NUMBER,
    REIMB_AMOUNT NUMBER,
    REIMB_SUBMITTED TIMESTAMP,
    REIMB_RESOLVED TIMESTAMP,
    REIMB_DESCRIPTION varchar2(250),
    REIMB_RECEIPT BLOB,
    REIMB_AUTHOR NUMBER,
    REIMB_RESOLVER NUMBER,
    REIMB_STATUS_ID NUMBER,
    REIMB_TYPE_ID NUMBER,
    CONSTRAINT ERS_REIMBURSMENT_PK PRIMARY KEY (REIMB_ID)
    
);

ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT ERS_USERS_FK_AUTH
FOREIGN KEY ( REIMB_AUTHOR ) REFERENCES ERS_USERS ( ERS_USERS_ID )
ON DELETE CASCADE;

ALTER TABLE ERS_REIMBURSEMENT DROP CONSTRAINT ERS_USERS_FK_AUTH;

ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT ERS_USERS_FK_RESLVR
FOREIGN KEY ( REIMB_RESOLVER ) REFERENCES ERS_USERS ( ERS_USERS_ID );

ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT ERS_REIMBURSEMENT_STATUS_FK
FOREIGN KEY ( REIMB_STATUS_ID ) REFERENCES ERS_REIMBURSEMENT_STATUS ( REIMB_STATUS_ID );

ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT ERS_REIMBURSEMENT_TYPE_FK
FOREIGN KEY ( REIMB_TYPE_ID ) REFERENCES ERS_REIMBURSEMENT_TYPE ( REIMB_TYPE_ID );

create table ERS_REIMBURSEMENT_STATUS
(
    REIMB_STATUS_ID NUMBER,
    REIMB_STATUS varchar2(10),
    CONSTRAINT REIMB_STATUS_PK PRIMARY KEY (REIMB_STATUS_ID)
    
);

create table ERS_REIMBURSEMENT_TYPE
(
    REIMB_TYPE_ID NUMBER,
    REIMB_TYPE varchar2(10),
    CONSTRAINT REIMB_TYPE_PK PRIMARY KEY (REIMB_TYPE_ID)
    
);

create table ERS_USER_ROLES
(
    ERS_USER_ROLE_ID NUMBER,
    USER_ROLE varchar2(10),
    CONSTRAINT ERS_USER_ROLES_PK PRIMARY KEY (ERS_USER_ROLE_ID)
    
);

INSERT INTO ERS_USER_ROLES VALUES(1, 'EMPLOYEE');
INSERT INTO ERS_USER_ROLES VALUES(2, 'MANAGER');
INSERT INTO ERS_USER_ROLES VALUES(3, 'LOCKED');

INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(1, 'LODGING');
INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(2, 'TRAVEL');
INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(3, 'FOOD');
INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES(4, 'OTHER');

INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(1, 'PENDING');
INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(2, 'DENIED');
INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(3, 'APPROVED');

commit;

DELETE FROM ERS_USERS WHERE USER_EMAIL = 'ealexanderhsi@gmail.com';

DROP SEQUENCE ers_users_seq;

CREATE SEQUENCE ers_users_seq
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1;
    
DROP SEQUENCE ers_reimbursement_seq;

CREATE SEQUENCE ers_reimbursement_seq
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1;
    
CREATE OR REPLACE TRIGGER ers_users_seq_trigger BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
    SELECT ers_users_seq.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;
END;
/
    
CREATE OR REPLACE TRIGGER ers_reimbursement_seq_trigger BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
    SELECT ers_reimbursement_seq.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;
END;
/  
    
INSERT INTO ERS_USERS VALUES(0, 'ehsi', 'password', 'Evan', 'Hsi', 'ehsi@gmail.com', '2');
commit;

CREATE OR REPLACE TRIGGER reimb_submit_time BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
    SELECT systimestamp INTO :NEW.REIMB_SUBMITTED FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER reimb_resolve_time BEFORE UPDATE ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
    SELECT systimestamp INTO :NEW.REIMB_RESOLVED FROM DUAL;
END;
/
    
INSERT INTO ERS_REIMBURSEMENT VALUES(0, 20, null, null, 'test', null, 1, null, 1, 1);
INSERT INTO ERS_REIMBURSEMENT VALUES(0, 50, null, null, 'test2', null, 1, null, 1, 1);
INSERT INTO ERS_REIMBURSEMENT VALUES(0, 100, null, null, 'test3', null, 1, null, 1, 2);
commit;

DELETE FROM ERS_REIMBURSEMENT WHERE REIMB_AMOUNT = 100;

SELECT * FROM ERS_REIMBURSEMENT;
    
INSERT INTO ERS_USERS VALUES(0, 'dummy', 'dummy', 'dummy', 'dummy', 'dummy', '2');
UPDATE ERS_USERS SET ers_users_id = 0 WHERE ers_username = 'dummy';
commit;