type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 116
    length: 107
    placeholder_text: // Provide your implementation here
    initial_state:
      length: 35
      offset: 101
    initialized_from_dependency: false
    possible_answer: |-
      // Handle the base cases; string is null or empty - return empty string
              if (reverseMe == null || reverseMe.equals("")) {
                  return "";
              }

              // Instantiate a char array that will hold the chars of the string in reverse order
              char[] stringChars = reverseMe.toCharArray();

              // Instantiate a stack to hold characters of the string to be reversed
              Stack<Character> characterStack = new Stack<>();

              // Iterate across stringChars obtained from the string and push each char into the stack
              for(char c : stringChars) characterStack.push(c);

              // Reverse the order of the chars in stringChars using characterStack
              int k = 0;
              while(!characterStack.isEmpty()) {
                  stringChars[k++] = characterStack.pop();
              }

              // Return the reversed string
              return String.copyValueOf(stringChars);
    selected: true
    status: Solved
  text: |-
    import java.util.Stack;

    public class Task {

        public String reverse(String reverseMe) {

            // Provide your implementation here

        }

    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.*;
    import org.junit.rules.ExpectedException;
    import org.junit.rules.Timeout;

    import static org.junit.Assert.assertEquals;

    public class Tests {

      private Task sut;

      @Rule
      public ExpectedException expectedException = ExpectedException.none();

      @Rule
      public Timeout globalTimeout = Timeout.seconds(3);

      @Before
      public void setUp() {
        sut = new Task();
      }

      @After
      public void tearDown() {
        sut = null;
      }

      @Test
      public void testSolutionUsingNullString() {
        assertEquals("The implementation should return an empty String if a null argument is provided",
                "", sut.reverse(""));
      }

      @Test
      public void testSolutionUsingEmptyString() {
        assertEquals("The implementation should return an empty String if an empty String argument is provided",
                "", sut.reverse(""));
      }

      @Test
      public void testSolutionUsingSimpleString() {
        assertEquals("The method is expected to reverse the provided String argument.",
                "tobor", sut.reverse("robot"));
      }

      @Test
      public void testSolutionUsingStringWithCapitalizedLetter() {
        assertEquals("The method is expected to reverse the provided String argument.",
                "nemaR", sut.reverse("Ramen"));
      }

      @Test
      public void testSolutionUsingStringWithPunctuationAndSpaces() {
        assertEquals("The method is expected to reverse the provided String argument.",
                "!yrgnuh m'I", sut.reverse("I'm hungry!"));
      }

      @Test
      public void testSolutionUsingPalindrome() {
        assertEquals("The method is expected to reverse the provided String argument.",
                "racecar", sut.reverse("racecar"));
      }

      @Test
      public void testSolutionUsingStringWithNewLines() {
        assertEquals("The method is expected to reverse the provided String argument.",
                "654\nfed\n321\ncba", sut.reverse("abc\n123\ndef\n456"));
      }

    }
  learner_created: false
status: Solved
record: -1
