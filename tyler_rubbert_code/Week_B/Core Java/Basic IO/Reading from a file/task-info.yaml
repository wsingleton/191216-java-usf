type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 194
    length: 1095
    placeholder_text: // Provide your implementation here
    initial_state:
      length: 35
      offset: 194
    initialized_from_dependency: false
    possible_answer: |-
      // Check if provided file is valid, if not return null
              if (quoteFile == null || !quoteFile.exists()) {
                  System.err.println("Invalid file provided.");
                  return lines;
              }

              // Use a BufferedReader to traverse each line of the file
              try(BufferedReader fileReader = new BufferedReader(new FileReader(quoteFile))){

                  // Obtain the first line of the file
                  String line = fileReader.readLine();

                  // Loop until there are no lines left in the file
                  while(line != null) {
                      // Make a new array with an increased capacity of one index
                      lines = Arrays.copyOf(lines, lines.length + 1);

                      // Add line into the array, and proceed to the next line in the file
                      lines[lines.length - 1] = line;
                      line = fileReader.readLine();
                  }

              }

              // Handle exceptions
              catch (Exception e) {
                  System.err.println("An unexpected exception was thrown.");
              }

              // Return the lines array
              return lines;
    selected: true
    status: Solved
  text: |
    import java.io.*;
    import java.util.Arrays;

    public class Task {

        public String[] getLines(File quoteFile) {

            // Instantiate an array
            String[] lines = new String[0];

            // Provide your implementation here

        }

    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |
    import org.junit.*;
    import org.junit.rules.ExpectedException;
    import org.junit.rules.Timeout;

    import java.io.File;

    import static org.junit.Assert.assertArrayEquals;
    import static org.junit.Assert.assertEquals;

    public class Tests {

      private Task sut;

      @Rule
      public ExpectedException expectedException = ExpectedException.none();

      @Rule
      public Timeout globalTimeout = Timeout.seconds(3);

      @Before
      public void setUp() {
        sut = new Task();
      }

      @After
      public void tearDown() {
        sut = null;
      }

      @Test
      public void testSolutionWithValidTestFile() {

        String[] expectedResult = {
                                    "This is test line 1.",
                                    "This is test line 2.",
                                    "This is test line 3.",
                                    "This is test line 4."
                                  };

        File testFile = new File("resources/test.txt");
        assertArrayEquals(expectedResult, sut.getLines(testFile));

      }

      @Test
      public void testSolutionWithEmptyFile() {
        File emptyFile = new File("resources/empty.txt");
        assertArrayEquals("An empty array is expected if the source text file is empty.",
                new String[0], sut.getLines(emptyFile));
      }

      @Test
      public void testSolutionWithNonExistentFile() {
        File nonFile = new File("resources/fake-file.txt");
        assertArrayEquals("An empty array is expected if the source text file does not exist.",
                new String[0], sut.getLines(nonFile));
      }

      @Test
      public void testSolutionWithNullFile() {
        assertArrayEquals("An empty array is expected if provided File argument is null.",
                new String[0], sut.getLines(null));
      }

    }
  learner_created: false
- name: resources/test.txt
  visible: false
  text: |-
    This is test line 1.
    This is test line 2.
    This is test line 3.
    This is test line 4.
  learner_created: false
- name: resources/empty.txt
  visible: false
  learner_created: false
status: Solved
record: -1
