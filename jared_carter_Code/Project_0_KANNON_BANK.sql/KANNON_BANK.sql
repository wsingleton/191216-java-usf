--DROP TABLE USERS_BANK
--DROP TABLE ACCOUNTS_BANK


CREATE TABLE USERS_BANK (

 USER_ID NUMBER(10) PRIMARY KEY,
 FIRSTNAME VARCHAR(25) NOT NULL,
 LASTNAME VARCHAR(25) NOT NULL,
 USERNAME VARCHAR(25) UNIQUE NOT NULL,
 PASS_WORD VARCHAR(50) NOT NULL  

);

CREATE TABLE ACCOUNTS_BANK (
 
 OWNER_ACCOUNT NUMBER(10) NOT NULL,
 ACCOUNT_ID NUMBER(10) PRIMARY KEY,
 ACCOUNT_BALANCE NUMBER(15) NOT NULL,
 
  FOREIGN KEY (OWNER_ACCOUNT) REFERENCES USERS_BANK(USER_ID)
 
);

CREATE SEQUENCE USERS_BANK_SEQUENCE;

CREATE OR REPLACE PROCEDURE RETRIEVE_USERS_BANK (CURSOR_USER OUT SYS_REFCURSOR)
AS
BEGIN
OPEN
    CURSOR_USER FOR SELECT * FROM USERS_BANK;
END;
/

CREATE SEQUENCE ACCOUNTS_BANK_SEQUENCE;

CREATE OR REPLACE PROCEDURE RETRIVE_ALL_BANK_ACCOUNTS
(CURSOR_ACCOUNT OUT SYS_REFCURSOR)
AS
BEGIN
OPEN
    CURSOR_ACCOUNT FOR SELECT * FROM ACCOUNTS_BANK;
END;
/


CREATE OR REPLACE TRIGGER USERS_BANK_TRIGGER
BEFORE INSERT ON USERS_BANK
FOR EACH ROW 
BEGIN
    SELECT USERS_BANK_SEQUENCE.NEXTVAL INTO: NEW.USER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER ACCOUNTS_BANK_TRIGGER
BEFORE INSERT ON ACCOUNTS_BANK
FOR EACH ROW 
BEGIN
    SELECT ACCOUNTS_BANK_SEQUENCE.NEXTVAL INTO: NEW.ACCOUNT_ID FROM DUAL;
END;
/


SELECT * FROM USERS_BANK;
SELECT * FROM ACCOUNTS_BANK;

COMMIT;