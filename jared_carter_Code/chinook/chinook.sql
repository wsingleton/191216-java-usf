--2.1 JC
SELECT * FROM Employee;
SELECT * FROM Employee WHERE lastname= 'King';
SELECT * FROM Employee WHERE firstname= 'Andrew' AND REPORTSTO IS NULL;
--2.2 JC
SELECT * FROM Album ORDER BY TITLE DESC;
SELECT firstname FROM Customer ORDER BY firstname ASC;
--2.3 JC
INSERT INTO Genre (GENREID, NAME) VALUES (26,'Gunner');
INSERT INTO Genre (GENREID, NAME) VALUES (27,'Kannon');

INSERT INTO Employee (EMPLOYEEID, LASTNAME,FIRSTNAME, TITLE) VALUES (12,'CARTER', 'GUNNER','TOP DOG');
INSERT INTO Employee (EMPLOYEEID, LASTNAME,FIRSTNAME, TITLE) VALUES (11,'CAR', 'KAN','TOP DOG');

INSERT INTO Customer (CUSTOMERID,FIRSTNAME,LASTNAME, EMAIL) VALUES (60,'Jared','Cutter','JAREDC@YAHOO.COM');
INSERT INTO 
Customer (CUSTOMERID,FIRSTNAME,LASTNAME, EMAIL) VALUES (61,'Jerry','Hutter', 'JERRYHUTER@YAHOO.COM');
SELECT * FROM Customer;
--2.4 JC
UPDATE Customer 
SET FIRSTNAME = 'ROBERT', LASTNAME= 'WALTER'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME= 'Mitchell';

UPDATE Artist 
SET NAME='CCR' 
WHERE NAME='Creedence Clearwater Revival';
--2.5 JC

SELECT * 
FROM Invoice 
WHERE billingaddress LIKE 'T%';
--2.6 JC
SELECT * FROM Invoice WHERE INVOICEID BETWEEN 15 AND 50;

SELECT * FROM Employee WHERE HIREDATE BETWEEN '01-JUNE-2003' AND '01-MAR-2004';
COMMIT;
--2.7 JC
DELETE FROM INVOICELINE WHERE INVOICEID IN
    (SELECT INVOICEID FROM INVOICE WHERE CUSTOMERID IN 
    (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter'));
        
DELETE FROM INVOICE WHERE CUSTOMERID IN
    (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter');
    
DELETE FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';
 

--3.1 JC
CREATE OR REPLACE FUNCTION CURRENT_TIME
    RETURN TIMESTAMP
    IS CURRENT_DAY TIMESTAMP;
    BEGIN
        SELECT LOCALTIMESTAMP
        INTO CURRENT_DAY
        FROM DUAL;
        RETURN CURRENT_DAY;
    END CURRENT_TIME;
/
DECLARE
    CLOCK TIMESTAMP;
BEGIN
    CLOCK := CURRENT_TIME;
    DBMS_OUTPUT.PUT_LINE('Current time is ' || CLOCK);
END;
/
CREATE OR REPLACE FUNCTION RETURN_MEDIA(REQ_ID IN NUMBER)
    RETURN VARCHAR2
    IS MEDIA_NAME MEDIATYPE.NAME%TYPE;
    BEGIN
        SELECT NAME INTO MEDIA_NAME
        FROM MEDIA_TYPE WHERE MEDIATYPEID = REQ_ID;
        RETURN MEDIA_NAME;
    END FETCH_MEDIA_NAME;
/

CREATE OR REPLACE FUNCTION MEDIA_TYPE_L(REQ_ID IN NUMBER)
    RETURN NUMBER
    AS LEN NUMBER;
    BEGIN
        SELECT LENGTH(RETURN_MEDIA_NAME(REQ_ID)) INTO LEN
        FROM DUAL;
        RETURN LEN;
    END MEDIA_TYPE_L;
/
--3.2
CREATE OR REPLACE FUNCTION avg_number_of_total_invoices
    RETURN NUMBER
    AS AVERAGE NUMBER;
    BEGIN
        SELECT AVG(TOTAL) INTO AVERAGE
        FROM INVOICE;
        RETURN AVERAGE;
    END avg_number_of_total_invoices;
/
DECLARE
    tot NUMBER;
BEGIN
    tot := AVG_NUMBER_OF_TOTAL_INVOICE;
    DBMS_OUTPUT.PUT_LINE(tot);
END;
/

CREATE OR REPLACE FUNCTION most_exp
    RETURN VARCHAR2
    AS NAMES VARCHAR2(100);
    BEGIN
        SELECT NAME INTO NAMES
        FROM TRACK WHERE rownum = 1 AND UNITPRICE IN
            (SELECT MAX(UNITPRICE) FROM TRACK);
        RETURN NAMES;
    END most_exp;
/

--3.3 -- JC
CREATE OR REPLACE FUNCTION AV_INVOICELINE_ITEM_PRICE
    RETURN NUMBER
    AS AVERAGE NUMBER;
    tot NUMBER := 0;
    C NUMBER;
    cnt NUMBER := 0;
    CURSOR S IS
        SELECT UNITPRICE FROM INVOICELINE;
    BEGIN
        OPEN S;
        LOOP
            FETCH S INTO C;
            tot := tot + C;
            cnt := cnt + 1;
            EXIT WHEN S%NOTFOUND;
        END LOOP;
        CLOSE S;
        AVERAGE := tot / cnt;
        RETURN AVERAGE;
    END AV_INVOICELINE_ITEM_PRICE;
/
--3.4 JC
SELECT after_1968()
FROM DUAL;
DECLARE
    v_cursor    SYS_REFCURSOR;
    v_fn        employee.firstname%TYPE;
    v_ln        employee.lastname%TYPE;
    v_bd        employee.birthdate%TYPE;
BEGIN
    v_cursor := after_1968();
    
    LOOP
        FETCH v_cursor
        INTO v_fn, v_ln, v_bd;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_fn || ' ' || v_ln || ' was born on ' || v_bd);
    END LOOP;
    CLOSE v_cursor;
END;
/

--4.1 JC
CREATE OR REPLACE PROCEDURE full_name
IS
    CURSOR S IS SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
    fn EMPLOYEE.FIRSTNAME%TYPE;
    ln EMPLOYEE.LASTNAME%TYPE;
BEGIN
    OPEN S;
    LOOP
        FETCH S INTO fn, ln;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME: ' || fn || ' ' || ln);
        EXIT WHEN S%NOTFOUND;
    END LOOP;
    CLOSE S;
END full_name;
/

BEGIN
    full_name;
END;
/

--4.2
CREATE OR REPLACE PROCEDURE 
update_information (EID IN EMPLOYEEID%TYPE,
                 UE IN OUT EMPLOYEE%ROWTYPE)
IS
    ERES EMPLOYEE%ROWTYPE;
BEGIN
    SELECT * INTO ERES
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EID;

END update_information;
/
--4.2 part2
CREATE OR REPLACE PROCEDURE MANAGERS
IS
    CURSOR S IS 
        SELECT E1.FIRSTNAME, E2.LASTNAME 
        FROM EMPLOYEE E1 INNER JOIN EMPLOYEE E2 
        ON E1.EMPLOYEEID = E2.REPORTSTO;
    FNAME EMPLOYEE.FIRSTNAME%TYPE;
    LNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    OPEN S;
    LOOP
        FETCH S INTO FNAME, LNAME;
        DBMS_OUTPUT.PUT_LINE('MANAGER NAME: ' || FNAME || ' ' || LNAME);
        EXIT WHEN S%NOTFOUND;
    END LOOP;
    CLOSE S;
END MANAGERS;
/
--4.3
CREATE OR REPLACE PROCEDURE
SP_NAME_AND_COMPANY(C_ID IN NUMBER) AS
BEGIN
        SELECT COMPANY, FIRSTNAME, LASTNAME INTO C_COMPANY, C_FIRST_NAME, C_LAST_NAME
        FROM chinook.CUSTOMER
        WHERE CUSTOMERID = C_ID;
   
END;

/
--5.0 JC
CREATE OR REPLACE PROCEDURE
SP_DELETE_INVOICE(I_ID IN NUMBER) AS
BEGIN
    DELETE FROM chinook.INVOICE
    WHERE INVOICEID = I_ID;
        
    DBMS_OUTPUT.PUT_LINE('invoice deleted');
    COMMIT;
    
    EXCEPTION
            WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('Invoice does not exist.');
            ROLLBACK;
END;
/

--5.0
CREATE OR REPLACE PROCEDURE --INSERT_CUSTOMER( ) AS
BEGIN
    --INSERT INTO chinook.CUSTOMER
    --VALUES
    --(C_ID);

    
   -- EXCEPTION
            WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('FAILED');
            ROLLBACK;
END;
/
--5.0 PART2
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(
    INSERT INTO chinook.CUSTOMER
    VALUES
    ();
    
    DBMS_OUTPUT.PUT_LINE('ADDED');
    COMMIT;
    
    EXCEPTION
            WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('FAILED');
            ROLLBACK;
END;
/
--6.1 JC PART 1
CREATE OR REPLACE TRIGGER afterEmployeeInsert AFTER INSERT ON employee

BEGIN
    
    DBMS_OUTPUT.PUT_LINE('INSERT successful');

END;
/
--6.1 JC PART 2
CREATE OR REPLACE TRIGGER AFTER_ALBUM_UPDATE
AFTER UPDATE ON chinook.ALBUM
FOR EACH ROW
WHEN (NEW.ALBUMID > 0)
END;

--6.1 JC PART 3

CREATE OR REPLACE TRIGGER AFTER_CUSTOMER_DELETE
AFTER DELETE ON chinook.CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('Customer deleted.');
END;
/
--6.2
CREATE OR REPLACE TRIGGER checkdelete BEFORE DELETE ON invoice
FOR EACH ROW
BEGIN
        IF :OLD.total > 50 THEN
            RAISE_APPLICATION_ERROR(-1500, 'Invoice > $50');
        END IF;
END;
/
--7.1 JC
SELECT INVOICEID, FIRSTNAME, LASTNAME 
FROM CUSTOMER 
INNER JOIN INVOICE 
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
--7.2 JC
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
RIGHT OUTER JOIN INVOICE
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

--7.3 JC
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM
RIGHT OUTER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4 JC
SELECT *
FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;

--7.5 JC
SELECT *
FROM EMPLOYEE em1
INNER JOIN EMPLOYEE em2
ON em1.REPORTSTO = em2.REPORTSTO;
--8.1 JC

CREATE INDEX genre_index ON genre (name) COMPUTE STATISTICS;

COMMIT;