--2.1 JC
SELECT * FROM Employee;
SELECT * FROM Employee WHERE lastname= 'King';
SELECT * FROM Employee WHERE firstname= 'Andrew' AND REPORTSTO IS NULL;
--2.2 JC
SELECT * FROM Album ORDER BY TITLE DESC;
SELECT firstname FROM Customer ORDER BY firstname ASC;
--2.3 JC
INSERT INTO Genre (GENREID, NAME) VALUES (26,'Gunner');
INSERT INTO Genre (GENREID, NAME) VALUES (27,'Kannon');

INSERT INTO Employee (EMPLOYEEID, LASTNAME,FIRSTNAME, TITLE) VALUES (12,'CARTER', 'GUNNER','TOP DOG');
INSERT INTO Employee (EMPLOYEEID, LASTNAME,FIRSTNAME, TITLE) VALUES (11,'CAR', 'KAN','TOP DOG');

INSERT INTO Customer (CUSTOMERID,FIRSTNAME,LASTNAME, EMAIL) VALUES (60,'Jared','Cutter','JAREDC@YAHOO.COM');
INSERT INTO 
Customer (CUSTOMERID,FIRSTNAME,LASTNAME, EMAIL) VALUES (61,'Jerry','Hutter', 'JERRYHUTER@YAHOO.COM');
SELECT * FROM Customer;
--2.4 JC
UPDATE Customer 
SET FIRSTNAME = 'ROBERT', LASTNAME= 'WALTER'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME= 'Mitchell';

UPDATE Artist 
SET NAME='CCR' 
WHERE NAME='Creedence Clearwater Revival';
--2.5 JC

SELECT * 
FROM Invoice 
WHERE billingaddress LIKE 'T%';
--2.6 JC
SELECT * FROM Invoice WHERE INVOICEID BETWEEN 15 AND 50;

SELECT * FROM Employee WHERE HIREDATE BETWEEN '01-JUNE-2003' AND '01-MAR-2004';
COMMIT;
--2.7 JC
DELETE FROM INVOICELINE WHERE INVOICEID IN
    (SELECT INVOICEID FROM INVOICE WHERE CUSTOMERID IN 
    (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter'));
        
DELETE FROM INVOICE WHERE CUSTOMERID IN
    (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter');
    
DELETE FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';
 

--3.1 JC
CREATE OR REPLACE FUNCTION CURRENT_TIME
    RETURN TIMESTAMP
    IS CURRENT_DAY TIMESTAMP;
    BEGIN
        SELECT LOCALTIMESTAMP
        INTO CURRENT_DAY
        FROM DUAL;
        RETURN CURRENT_DAY;
    END CURRENT_TIME;
/
DECLARE
    CLOCK TIMESTAMP;
BEGIN
    CLOCK := CURRENT_TIME;
    DBMS_OUTPUT.PUT_LINE('Current time is ' || CLOCK);
END;
/
CREATE OR REPLACE FUNCTION RETURN_MEDIA_NAME(REQ_ID IN NUMBER)
    RETURN VARCHAR2
    IS MEDIA_NAME MEDIATYPE.NAME%TYPE;
    BEGIN
        SELECT NAME INTO MEDIA_NAME
        FROM MEDIA_TYPE WHERE MEDIATYPEID = REQ_ID;
        RETURN MEDIA_NAME;
    END FETCH_MEDIA_NAME;
/

CREATE OR REPLACE FUNCTION MEDIA_TYPE_LENGTH(REQ_ID IN NUMBER)
    RETURN NUMBER
    AS LEN NUMBER;
    BEGIN
        SELECT LENGTH(RETURN_MEDIA_NAME(REQ_ID)) INTO LEN
        FROM DUAL;
        RETURN LEN;
    END MEDIA_TYPE_LENGTH;
/
--3.2
CREATE OR REPLACE FUNCTION avg_number_of_total_invoices
    RETURN NUMBER
    AS AVERAGE NUMBER;
    BEGIN
        SELECT AVG(TOTAL) INTO AVERAGE
        FROM INVOICE;
        RETURN AVERAGE;
    END avg_number_of_total_invoices;
/
DECLARE
    tot NUMBER;
BEGIN
    tot := AVG_NUMBER_OF_TOTAL_INVOICE;
    DBMS_OUTPUT.PUT_LINE(tot);
END;
/

CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK
    RETURN VARCHAR2
    AS NAMES VARCHAR2(200);
    BEGIN
        SELECT NAME INTO NAMES
        FROM TRACK WHERE rownum = 1 AND UNITPRICE IN
            (SELECT MAX(UNITPRICE) FROM TRACK);
        RETURN NAMES;
    END MOST_EXPENSIVE_TRACK;
/

--3.3 -- JC

COMMIT;