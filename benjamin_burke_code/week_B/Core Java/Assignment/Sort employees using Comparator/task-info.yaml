type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 198
    length: 20
    placeholder_text: // Provide your implementation here
    initial_state:
      length: 35
      offset: 198
    initialized_from_dependency: false
    possible_answer: |-
      if (employeesForSorting == null || employeesForSorting.isEmpty()) return new ArrayList<>();
              Collections.sort(employeesForSorting, new EmployeeComparator());
              return employeesForSorting;
    selected: true
    status: Failed
  text: |
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    public class Task {

        public List<Employee> sortEmployeesBySalary(List<Employee> employeesForSorting) {

            // Provide your implementation here

        }

    }
  learner_created: false
- name: src/Employee.java
  visible: true
  placeholders:
  - offset: 56
    length: 1694
    placeholder_text: // Provide your implementation here
    initial_state:
      length: 35
      offset: 56
    initialized_from_dependency: false
    possible_answer: |-
      private int id;
          private String firstName;
          private String lastName;
          private double salary;

          public Employee() {
              super();
          }

          public Employee(int id, String firstName, String lastName, double salary) {
              setId(id);
              this.firstName = firstName;
              this.lastName = lastName;
              setSalary(salary);
          }

          public int getId() {
              return id;
          }

          public void setId(int id) {
              if (id < 0) return;
              this.id = id;
          }

          public String getFirstName() {
              return firstName;
          }

          public void setFirstName(String firstName) {
              this.firstName = firstName;
          }

          public String getLastName() {
              return lastName;
          }

          public void setLastName(String lastName) {
              this.lastName = lastName;
          }

          public double getSalary() {
              return salary;
          }

          public void setSalary(double salary) {
              if (salary < 0) return;
              this.salary = salary;
          }

          @Override
          public boolean equals(Object o) {
              if (this == o) return true;
              if (o == null || getClass() != o.getClass()) return false;
              Employee employee = (Employee) o;
              return id == employee.id &&
                      Double.compare(employee.salary, salary) == 0 &&
                      Objects.equals(firstName, employee.firstName) &&
                      Objects.equals(lastName, employee.lastName);
          }

          @Override
          public int hashCode() {
              return Objects.hash(id, firstName, lastName, salary);
          }

          @Override
          public String toString() {
              return "Employee{" +
                      "id=" + id +
                      ", firstName='" + firstName + '\'' +
                      ", lastName='" + lastName + '\'' +
                      ", salary=" + salary +
                      '}';
          }
    selected: true
    status: Failed
  text: |+
    import java.util.Objects;

    public class Employee {

        // Provide your implementation here

    }

  learner_created: false
- name: src/EmployeeComparator.java
  visible: true
  placeholders:
  - offset: 62
    length: 31
    placeholder_text: /* Something goes here */
    initial_state:
      length: 25
      offset: 62
    initialized_from_dependency: false
    possible_answer: implements Comparator<Employee>
    selected: true
    status: Failed
  - offset: 101
    length: 39
    placeholder_text: // A method implementation will go here
    initial_state:
      length: 39
      offset: 95
    initialized_from_dependency: false
    possible_answer: |-
      @Override
          public int compare(Employee o1, Employee o2)  {

              if (o1 == null && o2 == null) return 0;
              else if ((o1 != null && o2 == null)) return 1;
              else if (o1 == null && o2 != null) return -1;

              if (o1.getSalary() == o2.getSalary()) {
                  return o1.getLastName().compareTo(o2.getLastName());
              }

              else if (o1.getSalary() > o2.getSalary()) return 1;
              return -1;

          }
    selected: true
    status: Failed
  text: |
    import java.util.Comparator;

    public class EmployeeComparator /* Something goes here */ {

        // A method implementation will go here

    }
  learner_created: false
- name: test/EmployeeComparatorTest.java
  visible: false
  text: |
    import org.junit.After;
    import org.junit.Before;
    import org.junit.Rule;
    import org.junit.Test;
    import org.junit.rules.ExpectedException;
    import org.junit.rules.Timeout;

    import java.util.Comparator;

    import static org.junit.Assert.assertEquals;
    import static org.junit.Assert.assertTrue;

    public class EmployeeComparatorTest {

        private EmployeeComparator sut;

        @Rule
        public ExpectedException expectedException = ExpectedException.none();

        @Rule
        public Timeout globalTimeout = Timeout.seconds(3);

        @Before
        public void setUp() {
            sut = new EmployeeComparator();
        }

        @After
        public void tearDown() {
            sut = null;
        }

        @Test
        public void testIfComparatorIsImplemented() {
            assertTrue(sut instanceof Comparator);
        }

        @Test
        public void testCompareWithValidEmployeesFirstArgSalaryIsGreater() {
            Employee e1 = new Employee(1, "alice", "anderson", 90000d);
            Employee e2 = new Employee(2, "bob", "bailey", 80000d);
            assertEquals("Should return 1 if the first argument is \"greater\"",1, sut.compare(e1, e2));
        }

        @Test
        public void testCompareWithValidEmployeesFirstArgSalaryIsLess() {
            Employee e1 = new Employee(1, "alice", "anderson", 80000d);
            Employee e2 = new Employee(2, "bob", "bailey", 90000d);
            assertEquals("Should return -1 if the first argument is \"less\"",-1, sut.compare(e1, e2));
        }

        @Test
        public void testCompareWithValidEmployeesSameSalaryFirstArgLastNameAlphabeticallyFirst() {
            Employee e1 = new Employee(1, "alice", "anderson", 90000d);
            Employee e2 = new Employee(2, "bob", "bailey", 90000d);
            assertEquals("Should return -1 if the first argument is \"greater\"",-1, sut.compare(e1, e2));
        }

        @Test
        public void testCompareWithNullEmployees() {
            assertEquals(0, sut.compare(null, null));
        }

        @Test
        public void testCompareWithFirstArgNull() {
            Employee e2 = new Employee(2, "bob", "bailey", 90000d);
            assertEquals(-1, sut.compare(null, e2));
        }

        @Test
        public void testCompareWithSecondArgNull() {
            Employee e1 = new Employee(1, "alice", "anderson", 90000d);
            assertEquals(1, sut.compare(e1, null));
        }

    }
  learner_created: false
- name: test/EmployeeTest.java
  visible: false
  text: |
    import org.junit.*;
    import org.junit.rules.ExpectedException;
    import org.junit.rules.Timeout;

    import static org.junit.Assert.*;

    public class EmployeeTest {

        private Employee sut;

        @Rule
        public ExpectedException expectedException = ExpectedException.none();

        @Rule
        public Timeout globalTimeout = Timeout.seconds(3);

        @Before
        public void setUp() {
            sut = new Employee();
        }

        @After
        public void tearDown() {
            sut = null;
        }

        @Test
        public void testIfEmployeeIsProperPojo() {
            Class<Employee> clazz = Employee.class;
            try {
                clazz.getMethod("getId");
                clazz.getMethod("getFirstName");
                clazz.getMethod("getLastName");
                clazz.getMethod("getSalary");
                clazz.getMethod("setId", int.class);
                clazz.getMethod("setFirstName", String.class);
                clazz.getMethod("setLastName", String.class);
                clazz.getMethod("setSalary", double.class);
                clazz.getMethod("equals", Object.class);
                clazz.getMethod("hashCode");
                clazz.getMethod("toString");
            } catch (NoSuchMethodException e) {
                fail("Missing required method. Class does not properly implement POJO design pattern.");
            }
        }

        @Test
        public void testToEnsureThatEmployeeCannotBeInstantiatedWithNegativeId() {
            sut = new Employee(-1, "alice", "anderson", 90000d);
            assertEquals("Should not be able to instantiate employee with a negative id", 0, sut.getId());
        }

        @Test
        public void testToEnsureThatEmployeeCannotBeInstantiatedWithNegativeSalary() {
            sut = new Employee(1, "alice", "anderson", -90000d);
            assertEquals("Should not be able to instantiate employee with a negative salary",
                    0, sut.getSalary(), 0);
        }

        @Test
        public void testToEnsureThatIdCannotBeSetToNegativeNumber() {
             sut = new Employee(1, "alice", "anderson", 90000d);
             sut.setId(-1);
             assertEquals("Should not be able to set id to negative value",1, sut.getId());
        }

        @Test
        public void testToEnsureThatSalaryCannotBeSetToNegativeNumber() {
            sut = new Employee(1, "alice", "anderson", 90000d);
            sut.setSalary(-100000d);
            assertEquals("Should not be able to set salary to negative value",90000d, sut.getSalary(), 0);
        }

    }
  learner_created: false
- name: test/TaskTest.java
  visible: false
  text: |-
    import org.junit.*;
    import org.junit.rules.ExpectedException;
    import org.junit.rules.Timeout;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Comparator;
    import java.util.List;

    import static org.junit.Assert.*;

    public class TaskTest {

      private Task sut;
      private List<Employee> sortedEmployeeList;

      @Rule
      public ExpectedException expectedException = ExpectedException.none();

      @Rule
      public Timeout globalTimeout = Timeout.seconds(3);

      @Before
      public void setUp() {

        sut = new Task();
        sortedEmployeeList = new ArrayList<>();
        sortedEmployeeList.add(new Employee(1, "alice", "anderson", 40000d));
        sortedEmployeeList.add(new Employee(2, "bob", "bailey", 50000d));
        sortedEmployeeList.add(new Employee(3, "charlie", "chaplin", 60000d));
        sortedEmployeeList.add(new Employee(4, "david", "davidson", 70000d));
        sortedEmployeeList.add(new Employee(5, "ethan", "eastman", 80000d));
        sortedEmployeeList.add(new Employee(6, "frank", "fowler", 80000d));

      }

      @After
      public void tearDown() {
        sut = null;
      }

      @Test
      public void testSolutionWithRandomEmployeeList() {

        List<Employee> randomEmployeeList = new ArrayList<>();
        randomEmployeeList.add(new Employee(6, "frank", "fowler", 80000d));
        randomEmployeeList.add(new Employee(2, "bob", "bailey", 50000d));
        randomEmployeeList.add(new Employee(1, "alice", "anderson", 40000d));
        randomEmployeeList.add(new Employee(4, "david", "davidson", 70000d));
        randomEmployeeList.add(new Employee(5, "ethan", "eastman", 80000d));
        randomEmployeeList.add(new Employee(3, "charlie", "chaplin", 60000d));

        assertEquals(sortedEmployeeList, sut.sortEmployeesBySalary(randomEmployeeList));

      }

      @Test
      public void testSolutionWithReversedEmployeeList() {

        List<Employee> reversedEmployeeList = new ArrayList<>();
        reversedEmployeeList.add(new Employee(6, "frank", "fowler", 80000d));
        reversedEmployeeList.add(new Employee(5, "ethan", "eastman", 80000d));
        reversedEmployeeList.add(new Employee(4, "david", "davidson", 70000d));
        reversedEmployeeList.add(new Employee(3, "charlie", "chaplin", 60000d));
        reversedEmployeeList.add(new Employee(2, "bob", "bailey", 50000d));
        reversedEmployeeList.add(new Employee(1, "alice", "anderson", 40000d));

        assertEquals(sortedEmployeeList, sut.sortEmployeesBySalary(reversedEmployeeList));

      }

      @Test
      public void testSolutionWithPreSortedEmployees() {
        assertEquals(sortedEmployeeList, sut.sortEmployeesBySalary(sortedEmployeeList));
      }

      @Test
      public void testSolutionWithEmptyEmployeeList() {
        assertEquals(new ArrayList<>(), sut.sortEmployeesBySalary(new ArrayList<>()));
      }

      @Test
      public void testSolutionWithNullEmployeeList() {
        assertEquals(new ArrayList<>(), sut.sortEmployeesBySalary(null));
      }

      @Test
      public void testSolutionWithEmployeeListContainingSomeNulls() {

        List<Employee> employeeListWithNulls = new ArrayList<>();
        employeeListWithNulls.add(new Employee(1, "alice", "anderson", 40000d));
        employeeListWithNulls.add(null);
        employeeListWithNulls.add(null);
        employeeListWithNulls.add(new Employee(4, "david", "davidson", 70000d));
        employeeListWithNulls.add(new Employee(5, "ethan", "eastman", 80000d));
        employeeListWithNulls.add(null);

        List<Employee> expectedList = new ArrayList<>();
        expectedList.add(null);
        expectedList.add(null);
        expectedList.add(null);
        expectedList.add(new Employee(1, "alice", "anderson", 40000d));
        expectedList.add(new Employee(4, "david", "davidson", 70000d));
        expectedList.add(new Employee(5, "ethan", "eastman", 80000d));

        assertEquals(expectedList, sut.sortEmployeesBySalary(employeeListWithNulls));

      }

    }
  learner_created: false
- name: assets/employee-uml.png
  visible: true
  learner_created: false
status: Failed
record: -1
