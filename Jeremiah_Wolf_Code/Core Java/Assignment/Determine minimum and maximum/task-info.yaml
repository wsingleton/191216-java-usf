type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 104
    length: 325
    placeholder_text: /* Provide your implementation here */
    initial_state:
      length: 38
      offset: 105
    initialized_from_dependency: false
    possible_answer: |-
      if (arr == null || arr.length == 0) {
                  return new int[0];
              }

              int[] minMax = new int[2];
              minMax[0] = minMax[1] = arr[0];
              for (int value : arr) {
                  if (value < minMax[0]) minMax[0] = value;
                  if (value > minMax[1]) minMax[1] = value;
              }

              return minMax;
    selected: false
    status: Solved
  text: |-
    import java.util.Arrays;

    public class Task {

        public int[] determineMinAndMax(int[] arr) {

            /* Provide your implementation here */

        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.*;
    import org.junit.rules.ExpectedException;
    import org.junit.rules.Timeout;

    import static org.junit.Assert.*;

    public class Tests {

      private Task sut;

      @Rule
      public ExpectedException expectedException = ExpectedException.none();

      @Rule
      public Timeout globalTimeout = Timeout.seconds(3);

      @Before
      public void setUp() {
        sut = new Task();
      }

      @After
      public void tearDown() {
        sut = null;
      }

      @Test
      public void testSolutionWithValidArrayOfRandomNumbers() {
        int[] testArray = { 3, 12, -3, 0, 93, 92, 22, 14, 1, 3, -3 };
        int[] expectedResult = { -3, 93 };
        int[] actualResult = sut.determineMinAndMax(testArray);
        assertEquals(2, actualResult.length);
        assertArrayEquals(expectedResult, actualResult);
      }

      @Test
      public void testSolutionWithValidArrayContainingDuplicatedNumber() {
        int[] testArray = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
        int[] expectedResult = { 3, 3 };
        int[] actualResult = sut.determineMinAndMax(testArray);
        assertEquals(2, actualResult.length);
        assertArrayEquals(expectedResult, actualResult);
      }

      @Test
      public void testSolutionWithValidArrayContainingOneNumber() {
        int[] testArray = { 93 };
        int[] expectedResult = { 93, 93 };
        int[] actualResult = sut.determineMinAndMax(testArray);
        assertEquals(2, actualResult.length);
        assertArrayEquals(expectedResult, actualResult);
      }

      @Test
      public void testSolutionWithEmptyArray() {
        assertArrayEquals(new int[0], sut.determineMinAndMax(new int[0]));
      }

      @Test
      public void testSolutionWithNullArray() {
        assertArrayEquals(new int[0], sut.determineMinAndMax(null));
      }

    }
  learner_created: false
status: Solved
record: -1
